{
  "_args": [
    [
      {
        "raw": "parameters@github:ircam-jstools/parameters#v1.0.1",
        "scope": null,
        "escapedName": "parameters",
        "name": "parameters",
        "rawSpec": "github:ircam-jstools/parameters#v1.0.1",
        "spec": "github:ircam-jstools/parameters#v1.0.1",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ircam-jstools/parameters.git#v1.0.1",
          "sshUrl": "git+ssh://git@github.com/ircam-jstools/parameters.git#v1.0.1",
          "httpsUrl": "git+https://github.com/ircam-jstools/parameters.git#v1.0.1",
          "gitUrl": "git://github.com/ircam-jstools/parameters.git#v1.0.1",
          "shortcut": "github:ircam-jstools/parameters#v1.0.1",
          "directUrl": "https://raw.githubusercontent.com/ircam-jstools/parameters/v1.0.1/package.json"
        }
      },
      "/Users/ismm/Projects/prototype0.4/node_modules/waves-lfo"
    ]
  ],
  "_from": "ircam-jstools/parameters#v1.0.1",
  "_id": "parameters@1.0.1",
  "_inCache": true,
  "_location": "/parameters",
  "_phantomChildren": {},
  "_requested": {
    "raw": "parameters@github:ircam-jstools/parameters#v1.0.1",
    "scope": null,
    "escapedName": "parameters",
    "name": "parameters",
    "rawSpec": "github:ircam-jstools/parameters#v1.0.1",
    "spec": "github:ircam-jstools/parameters#v1.0.1",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ircam-jstools/parameters.git#v1.0.1",
      "sshUrl": "git+ssh://git@github.com/ircam-jstools/parameters.git#v1.0.1",
      "httpsUrl": "git+https://github.com/ircam-jstools/parameters.git#v1.0.1",
      "gitUrl": "git://github.com/ircam-jstools/parameters.git#v1.0.1",
      "shortcut": "github:ircam-jstools/parameters#v1.0.1",
      "directUrl": "https://raw.githubusercontent.com/ircam-jstools/parameters/v1.0.1/package.json"
    }
  },
  "_requiredBy": [
    "/waves-lfo"
  ],
  "_resolved": "git://github.com/ircam-jstools/parameters.git#e883d58a36dfbe0837c70607df9df1b801f934b3",
  "_shasum": "5f4ad1ed68222ff764fcf379740d7fa84fca3866",
  "_shrinkwrap": null,
  "_spec": "parameters@github:ircam-jstools/parameters#v1.0.1",
  "_where": "/Users/ismm/Projects/prototype0.4/node_modules/waves-lfo",
  "author": {
    "name": "Benjamin Matuszewski"
  },
  "dependencies": {},
  "description": "Tiny library to deal with object parameters",
  "devDependencies": {
    "babel-core": "^6.14.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.14.0",
    "babel-plugin-transform-runtime": "^6.6.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-tape-runner": "^2.0.1",
    "browserify": "^13.0.0",
    "colors": "^1.1.2",
    "fs-extra": "^0.30.0",
    "jsdoc-to-markdown": "^1.3.7",
    "ora": "^0.3.0",
    "tape": "^4.6.0",
    "uglify-js": "^2.6.2",
    "watch": "^0.19.2"
  },
  "gitHead": "e883d58a36dfbe0837c70607df9df1b801f934b3",
  "license": "BSD-3-Clause",
  "main": "dist/parameters.js",
  "name": "parameters",
  "optionalDependencies": {},
  "readme": "# ParametersJS\n\n> Tiny and extendable library to type check class / object parameters.\n\n## TODOS\n\n- test nullable values\n\n## Install\n\n```\nnpm install [--save] parameters\n```\n\n## Usage\n\n```js\nconst definitions = {\n  myBooleanParam: {\n    type: 'boolean',\n    default: false,\n    constant: false,\n    metas: { kind: 'static' }\n  },\n  myIntegerParam: {\n    type: 'integer',\n    min: 0,\n    max: Infinity,\n    default: 0,\n    constant: false,\n    metas: {\n      kind: 'static',\n      shortDescr: 'My First Integer Param',\n      fullDescr: 'This parameter is my first integer parameter in this example.',\n      unit: '%',\n      step: 1,\n      max: 100,\n    }\n  },\n  // ...\n};\n\nclass MyClass {\n  constructor(options) {\n    this.params = parameters(definitions, options);\n\n    this.params.addListener((name, value, metas) => {\n      // ...\n    });\n\n    this.params.addParamListener('myIntegerParam', (value, metas) => {\n      // ...\n    });\n  }\n}\n\nconst myInstance = new MyClass({ myIntegerParam: 42 });\n\nconst bValue = myInstance.params.get('myBooleanParam');\n> false\n\nconst iValue = myInstance.params.get('myIntegerParam');\n> 42\n\nmyInstance.params.set('myIntegerParam', definitions.myIntegerParam.min - 1);\n```\n\n# API\n\n<a name=\"ParameterBag\"></a>\n\n## ParameterBag\nBag of parameters. Main interface of the library\n\n**Kind**: global class  \n\n* [ParameterBag](#ParameterBag)\n    * _instance_\n        * [.getDefinitions()](#ParameterBag+getDefinitions) ⇒ <code>Object</code>\n        * [.get(name)](#ParameterBag+get)\n        * [.set(name, value)](#ParameterBag+set)\n        * [.reset([name])](#ParameterBag+reset)\n        * [.addListener(callback)](#ParameterBag+addListener)\n        * [.removeListener(callback)](#ParameterBag+removeListener)\n        * [.addParamListener(name, callback)](#ParameterBag+addParamListener)\n        * [.removeParamListener(name, callback)](#ParameterBag+removeParamListener)\n    * _inner_\n        * [~listenerCallback](#ParameterBag..listenerCallback) : <code>function</code>\n        * [~paramListenerCallack](#ParameterBag..paramListenerCallack) : <code>function</code>\n\n<a name=\"ParameterBag+getDefinitions\"></a>\n\n### parameterBag.getDefinitions() ⇒ <code>Object</code>\nReturn the given definitions along with the initialization values.\n\n**Kind**: instance method of <code>[ParameterBag](#ParameterBag)</code>  \n<a name=\"ParameterBag+get\"></a>\n\n### parameterBag.get(name)\nReturn the value of the given parameter.\n\n**Kind**: instance method of <code>[ParameterBag](#ParameterBag)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>String</code> | Name of the parameter. |\n\n<a name=\"ParameterBag+set\"></a>\n\n### parameterBag.set(name, value)\nSet the value of a parameter. If the value of the parameter is updated\n(aka if previous value is different from new value) all registered\ncallbacks are registered.\n\n**Kind**: instance method of <code>[ParameterBag](#ParameterBag)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>String</code> | Name of the parameter. |\n| value | <code>Mixed</code> | Value of the parameter. |\n\n<a name=\"ParameterBag+reset\"></a>\n\n### parameterBag.reset([name])\nReset a parameter to its init value. Reset all parameters if no argument.\n\n**Kind**: instance method of <code>[ParameterBag](#ParameterBag)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [name] | <code>String</code> | <code></code> | Name of the parameter to reset. |\n\n<a name=\"ParameterBag+addListener\"></a>\n\n### parameterBag.addListener(callback)\nAdd listener to all param updates.\n\n**Kind**: instance method of <code>[ParameterBag](#ParameterBag)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| callback | <code>ParameterBag~listenerCallack</code> | Listener to register. |\n\n<a name=\"ParameterBag+removeListener\"></a>\n\n### parameterBag.removeListener(callback)\nRemove listener from all param changes.\n\n**Kind**: instance method of <code>[ParameterBag](#ParameterBag)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| callback | <code>ParameterBag~listenerCallack</code> | <code></code> | Listener to remove. If  `null` remove all listeners. |\n\n<a name=\"ParameterBag+addParamListener\"></a>\n\n### parameterBag.addParamListener(name, callback)\nAdd listener to a given param updates.\n\n**Kind**: instance method of <code>[ParameterBag](#ParameterBag)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>String</code> | Parameter name. |\n| callback | <code>[paramListenerCallack](#ParameterBag..paramListenerCallack)</code> | Function to apply  when the value of the parameter changes. |\n\n<a name=\"ParameterBag+removeParamListener\"></a>\n\n### parameterBag.removeParamListener(name, callback)\nRemove listener from a given param updates.\n\n**Kind**: instance method of <code>[ParameterBag](#ParameterBag)</code>  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| name | <code>String</code> |  | Parameter name. |\n| callback | <code>[paramListenerCallack](#ParameterBag..paramListenerCallack)</code> | <code></code> | Listener to remove.  If `null` remove all listeners. |\n\n<a name=\"ParameterBag..listenerCallback\"></a>\n\n### ParameterBag~listenerCallback : <code>function</code>\n**Kind**: inner typedef of <code>[ParameterBag](#ParameterBag)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| name | <code>String</code> | Parameter name. |\n| value | <code>Mixed</code> | Updated value of the parameter. |\n| [meta=] | <code>Object</code> | Given meta data of the parameter. |\n\n<a name=\"ParameterBag..paramListenerCallack\"></a>\n\n### ParameterBag~paramListenerCallack : <code>function</code>\n**Kind**: inner typedef of <code>[ParameterBag](#ParameterBag)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| value | <code>Mixed</code> | Updated value of the parameter. |\n| [meta=] | <code>Object</code> | Given meta data of the parameter. |\n\n<a name=\"parameters\"></a>\n\n## parameters(definitions, values) ⇒ <code>[ParameterBag](#ParameterBag)</code>\nFactory for the `ParameterBag` class.\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| definitions | <code>Object.&lt;String, paramDefinition&gt;</code> | Object describing the  parameters. |\n| values | <code>Object.&lt;String, Mixed&gt;</code> | Initialization values for the  parameters. |\n\n<a name=\"parameters.defineType\"></a>\n\n### parameters.defineType(typeName, parameterDefinition)\nRegister a new type for the `parameters` factory.\n\n**Kind**: static method of <code>[parameters](#parameters)</code>  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| typeName | <code>String</code> | Value that will be available as the `type` of a  param definition. |\n| parameterDefinition | <code>parameterDefinition</code> | Object describing the  parameter. |\n\n<a name=\"booleanDefinition\"></a>\n\n## booleanDefinition : <code>Object</code>\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| type | <code>String</code> | <code>&#x27;boolean&#x27;</code> | Define a boolean parameter. |\n| default | <code>Boolean</code> |  | Default value of the parameter. |\n| constant | <code>Boolean</code> | <code>false</code> | Define if the parameter is constant. |\n| metas | <code>Object</code> | <code>{}</code> | Optionnal metadata of the parameter. |\n\n<a name=\"integerDefinition\"></a>\n\n## integerDefinition : <code>Object</code>\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| type | <code>String</code> | <code>&#x27;integer&#x27;</code> | Define a boolean parameter. |\n| default | <code>Boolean</code> |  | Default value of the parameter. |\n| min | <code>Boolean</code> | <code>-Infinity</code> | Minimum value of the parameter. |\n| max | <code>Boolean</code> | <code>+Infinity</code> | Maximum value of the parameter. |\n| constant | <code>Boolean</code> | <code>false</code> | Define if the parameter is constant. |\n| metas | <code>Object</code> | <code>{}</code> | Optionnal metadata of the parameter. |\n\n<a name=\"floatDefinition\"></a>\n\n## floatDefinition : <code>Object</code>\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| type | <code>String</code> | <code>&#x27;float&#x27;</code> | Define a boolean parameter. |\n| default | <code>Boolean</code> |  | Default value of the parameter. |\n| min | <code>Boolean</code> | <code>-Infinity</code> | Minimum value of the parameter. |\n| max | <code>Boolean</code> | <code>+Infinity</code> | Maximum value of the parameter. |\n| constant | <code>Boolean</code> | <code>false</code> | Define if the parameter is constant. |\n| metas | <code>Object</code> | <code>{}</code> | Optionnal metadata of the parameter. |\n\n<a name=\"stringDefinition\"></a>\n\n## stringDefinition : <code>Object</code>\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| type | <code>String</code> | <code>&#x27;string&#x27;</code> | Define a boolean parameter. |\n| default | <code>Boolean</code> |  | Default value of the parameter. |\n| constant | <code>Boolean</code> | <code>false</code> | Define if the parameter is constant. |\n| metas | <code>Object</code> | <code>{}</code> | Optionnal metadata of the parameter. |\n\n<a name=\"enumDefinition\"></a>\n\n## enumDefinition : <code>Object</code>\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| type | <code>String</code> | <code>&#x27;enum&#x27;</code> | Define a boolean parameter. |\n| default | <code>Boolean</code> |  | Default value of the parameter. |\n| list | <code>Array</code> |  | Possible values of the parameter. |\n| constant | <code>Boolean</code> | <code>false</code> | Define if the parameter is constant. |\n| metas | <code>Object</code> | <code>{}</code> | Optionnal metadata of the parameter. |\n\n\n\n## License\n\nBSD-3-Clause\n\n",
  "readmeFilename": "README.md",
  "scripts": {
    "bundle": "node ./bin/runner --bundle",
    "docs": "jsdoc2md -t tmpl/README.hbs src/*.js > README.md",
    "prewatch": "npm run transpile",
    "test": "babel-tape-runner tests/**.test.js",
    "transpile": "node ./bin/runner --transpile",
    "watch": "node ./bin/runner --watch"
  },
  "version": "1.0.1"
}
