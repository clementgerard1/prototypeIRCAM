{
  "_args": [
    [
      {
        "raw": "sync@github:collective-soundworks/sync#0.7.3",
        "scope": null,
        "escapedName": "sync",
        "name": "sync",
        "rawSpec": "github:collective-soundworks/sync#0.7.3",
        "spec": "github:collective-soundworks/sync#0.7.3",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:collective-soundworks/sync.git#0.7.3",
          "sshUrl": "git+ssh://git@github.com/collective-soundworks/sync.git#0.7.3",
          "httpsUrl": "git+https://github.com/collective-soundworks/sync.git#0.7.3",
          "gitUrl": "git://github.com/collective-soundworks/sync.git#0.7.3",
          "shortcut": "github:collective-soundworks/sync#0.7.3",
          "directUrl": "https://raw.githubusercontent.com/collective-soundworks/sync/0.7.3/package.json"
        }
      },
      "/Users/ismm/Projects/soundworks-template/node_modules/soundworks"
    ]
  ],
  "_from": "collective-soundworks/sync#0.7.3",
  "_id": "sync@0.7.3",
  "_inCache": true,
  "_location": "/sync",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sync@github:collective-soundworks/sync#0.7.3",
    "scope": null,
    "escapedName": "sync",
    "name": "sync",
    "rawSpec": "github:collective-soundworks/sync#0.7.3",
    "spec": "github:collective-soundworks/sync#0.7.3",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:collective-soundworks/sync.git#0.7.3",
      "sshUrl": "git+ssh://git@github.com/collective-soundworks/sync.git#0.7.3",
      "httpsUrl": "git+https://github.com/collective-soundworks/sync.git#0.7.3",
      "gitUrl": "git://github.com/collective-soundworks/sync.git#0.7.3",
      "shortcut": "github:collective-soundworks/sync#0.7.3",
      "directUrl": "https://raw.githubusercontent.com/collective-soundworks/sync/0.7.3/package.json"
    }
  },
  "_requiredBy": [
    "/soundworks"
  ],
  "_resolved": "git://github.com/collective-soundworks/sync.git#85c8f76476112a736925f7def3641eae9992f30a",
  "_shasum": "3d094ecc581f4f58b1bead8a500a4fb9c1d1d23f",
  "_shrinkwrap": null,
  "_spec": "sync@github:collective-soundworks/sync#0.7.3",
  "_where": "/Users/ismm/Projects/soundworks-template/node_modules/soundworks",
  "authors": [
    "Jean-Philippe.Lambert@ircam.fr",
    "Sebastien.Robaszkiewicz@ircam.fr",
    "Norbert.Schnell@ircam.fr"
  ],
  "bugs": {
    "url": "https://github.com/collective-soundworks/sync/issues"
  },
  "dependencies": {
    "debug": "^2.1.1"
  },
  "description": "Client/Server time synchronization component",
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-browserify": "^0.5.1",
    "gulp-es6-transpiler": "^1.0.1",
    "gulp-rename": "^1.2.0",
    "gulp-watch": "^4.1.1",
    "jsdoc": "^3.3.3",
    "minami": "^1.1.1"
  },
  "gitHead": "85c8f76476112a736925f7def3641eae9992f30a",
  "homepage": "https://github.com/collective-soundworks/sync#readme",
  "license": "BSD-3-Clause",
  "name": "sync",
  "optionalDependencies": {},
  "readme": "# sync\n\nThis module synchronises the server and clients clocks on a common shared clock called “sync clock”.\n\nAll time calculations and exchanges should be expressed in the sync clock time, and all times are in seconds.\n\n## Get started\n\nOn the client side, you have to launch an instance of `SyncClient` and call the method `start`. You must specify what functions to use to:\n\n- get the local time,\n- send a message to the server (WebSocket-like),\n- receive a message from the server (WebSocket-like).\n\nFor instance, with the [`socket.io`](https://github.com/Automattic/socket.io) library:\n\n```javascript\n/* Client side */\n\nvar audioContext = new AudioContext() || new webkitAudioContext();\nvar socket = io();\nvar Sync = require('sync/client');\n\n////// Define the helper functions\n// function to get the local time\nvar getTimeFunction = () => { return audioContext.currentTime; }\n// function to send a message to the server\nvar sendFunction = socket.emit;\n // function to receive a message from the server\nvar receiveFunction = socket.on;\n\n// Initialize the sync module and start the synchronisation process\nvar sync = new SyncClient(getTimeFunction);\nsync.start(sendFunction, receiveFunction);\n\n// Listen for the events that indicate that the clock is in sync\nsync.on('sync:status', (report) => {\n  if(report.status === 'training' || 'sync') {\n    //  whatever you need to do once the clock is in sync\n    }\n})\n```\n\nOn the server side, you have to launch an instance of `SyncServer` and call the method `start`. Just like on the client side, you must specify what functions to use to:\n\n- get the local time;\n- send a message to the clients;\n- receive a message from the clients.\n\nFor instance, with the [`socket.io`](https://github.com/Automattic/socket.io) library:\n\n```javascript\n/* Server side */\n\n// Require libraries\nvar io = require('socket.io');\nvar Sync = require('sync/server');\n\n // function to get the local time\nvar getTimeFunction = () => {\n  let time = process.hrtime();\n  return time[0] + time[1] * 1e-9;\n};\n// Initialize sync module\nvar sync = new Sync(getTimeFunction);\n\n// Set up a WebSocket communication channel with the client\n// and start to listen for the messages from that client\nio.on('connection', function (socket) {\n  // function to send a WebSocket message to the client\n  let sendFunction = (msg, ...args) => socket.emit(msg, ...args);\n  // function to receive a WebSocket message from the client\n  let receiveFunction = (msg, callback) => socket.on(msg, callback);\n\n  sync.start(sendFunction, receiveFunction);\n  \n  ... // the rest of your code\n});\n```\n\n## Documentation\n\nThe documentation is available at `./doc/sync/${sync_version}/index.html`\nUse `npm run doc` to generate it.\n\n## License\n\n[BSD-3-Clause](https://opensource.org/licenses/BSD-3-Clause). See [LICENSE file](LICENSE).",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/collective-soundworks/sync.git"
  },
  "scripts": {
    "doc": "gulp transpile && jsdoc -c doc/jsdoc.json"
  },
  "version": "0.7.3"
}
