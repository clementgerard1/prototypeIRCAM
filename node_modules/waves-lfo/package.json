{
  "_args": [
    [
      {
        "raw": "wavesjs/waves-lfo",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "wavesjs/waves-lfo",
        "spec": "github:wavesjs/waves-lfo",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:wavesjs/waves-lfo.git",
          "sshUrl": "git+ssh://git@github.com/wavesjs/waves-lfo.git",
          "httpsUrl": "git+https://github.com/wavesjs/waves-lfo.git",
          "gitUrl": "git://github.com/wavesjs/waves-lfo.git",
          "shortcut": "github:wavesjs/waves-lfo",
          "directUrl": "https://raw.githubusercontent.com/wavesjs/waves-lfo/master/package.json"
        }
      },
      "/Users/ismm/Projects/prototype0.4"
    ]
  ],
  "_from": "wavesjs/waves-lfo",
  "_id": "waves-lfo@1.0.0",
  "_inCache": true,
  "_location": "/waves-lfo",
  "_phantomChildren": {},
  "_requested": {
    "raw": "wavesjs/waves-lfo",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "wavesjs/waves-lfo",
    "spec": "github:wavesjs/waves-lfo",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:wavesjs/waves-lfo.git",
      "sshUrl": "git+ssh://git@github.com/wavesjs/waves-lfo.git",
      "httpsUrl": "git+https://github.com/wavesjs/waves-lfo.git",
      "gitUrl": "git://github.com/wavesjs/waves-lfo.git",
      "shortcut": "github:wavesjs/waves-lfo",
      "directUrl": "https://raw.githubusercontent.com/wavesjs/waves-lfo/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/wavesjs/waves-lfo.git#fbd4bdcc30aea6445d6403313f4b83ffa4ac172e",
  "_shasum": "b1fd9cebbe9a63902537ec979a789ce129195f4b",
  "_shrinkwrap": null,
  "_spec": "wavesjs/waves-lfo",
  "_where": "/Users/ismm/Projects/prototype0.4",
  "bugs": {
    "url": "https://github.com/wavesjs/lfo/issues"
  },
  "dependencies": {
    "av": "^0.4.9",
    "babel-runtime": "^6.6.1",
    "parameters": "github:ircam-jstools/parameters#v1.0.1"
  },
  "description": "Low Frequency Operators",
  "devDependencies": {
    "babel-core": "^6.17.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.16.0",
    "babel-plugin-transform-runtime": "^6.6.0",
    "babel-preset-es2015": "^6.16.0",
    "babel-tape-runner": "^2.0.1",
    "benchmark": "^2.1.1",
    "browserify": "^13.0.0",
    "colors": "^1.1.2",
    "fs-extra": "^0.30.0",
    "jsdoc": "^3.4.2",
    "jsdoc-template": "github:ircam-jstools/jsdoc-template",
    "ora": "^0.3.0",
    "tape": "^4.6.2",
    "uglify-js": "^2.6.2",
    "watch": "^1.0.1"
  },
  "gitHead": "fbd4bdcc30aea6445d6403313f4b83ffa4ac172e",
  "homepage": "https://github.com/wavesjs/lfo",
  "jshintConfig": {
    "esnext": true,
    "browser": true,
    "node": true,
    "devel": true
  },
  "license": "BSD-3",
  "main": "dist/index.js",
  "name": "waves-lfo",
  "optionalDependencies": {},
  "readme": "\n![logo](https://cdn.rawgit.com/wavesjs/waves-lfo/develop/resources/logo.png)\n\n# _Low Frequency Operators_\n\nThe `lfo` library provides a simple and efficient graph-based javascript API primarily designed for the processing and analysis of signal and event data streams such as audio, audio descriptors and motion sensor data.\n\nA `graph` of `lfo` modules can process data streams online (i.e. processing data from audio inputs or event sources) as well as offline (e.g. iterating over recorded data) depending on the used `source` and `sink` modules. Many of the operator modules provided by the library (e.g. filters, signal statistics) can also be used for processing data using an alternative API without the `lfo` formalism.\n\nThe library exposes two main entry points, `waves-lfo/client` and `waves-lfo/node`, that respectively provide modules to be used in a browser or in a _Node.js_ environment. This architecture allows for adapting the library to virtually any context and platform by only providing adequate `source` and `sink` modules.\n\nThe library provides three namespaces:\n- **`source`** modules produce streams and propagate their properties (i.e. `frameRate`, `frameType`, etc.) through the graph.\n- **`sink`** modules are endpoints of the graph such as recorders and visualizers.\n- **`operator`** modules process an incoming stream and propagate the resulting stream to the next operators.\n\nA `graph` is a combination of at least a `source` and a `sink` with any number of `operator` modules in between:\n\n![scheme](https://dl.dropboxusercontent.com/u/606131/lfo.png)\n\n## Documentation\n\n[http://wavesjs.github.io/waves-lfo](http://wavesjs.github.io/waves-lfo)\n\n_**Important**: in the documentation, all nodes in the `common` and `core` namespaces are platform independent and can be used client-side as well as in node (aka from entry points `waves-lfo/client` and `waves-lfo/node`)._\n\n## Usage\n\n### Install\n\n```sh\n$ npm install [--save] wavesjs/waves-lfo\n```\n\n### Import the library\n\nTo use the library in browser or in node, import the corresponding entry point. These different access allow to use sources and sinks specific to the platform:\n\n```js\n// in browser\nimport * as lfo from 'waves-lfo/client';\n\n// in node\nimport * as lfo from 'waves-lfo/node';\n```\n\nTo create a script that targets any possible environnements (i.e. if no platform specific `source` or `sink` is used), the `common` entry point can be used: \n\n```js\nimport * as lfo from 'waves-lfo/common';\n```\n\n### Create a graph\n\n```js\nimport * as lfo from 'waves-lfo/common';\n\nconst eventIn = new lfo.source.EventIn({\n  frameType: 'vector'\n  frameSize: 3,\n  frameRate: 1,\n});\n\nconst rms = new lfo.operator.Rms();\nconst logger = new lfo.sink.Logger({ data: true });\n\neventIn.connect(rms);\nrms.connect(logger);\n\neventIn.start();\neventIn.process(0, [2, 1, 3]);\n// > [2.16024689947]\n```\n\n## Terminology\n\nThe `lfo` modules produce and consume data streams composed of _frames_. This is the terminology used by the library.\n\n- __stream__ - a succession of _frames_ described by a set of _stream parameters_\n- __frame__ - an element of a stream that associates a `data` element with a `time` and optional `metadata`\n- __data__ - a generic term to designate the _payload_ of a frame which can be a `vector`, a `signal` or a `scalar`\n- __vector__ - an array of values that correspond to different dimensions such as _[x y z]_ or _[mean stddev min max]_\n- __signal__ - an array of time-domain values corresponding to a fragment of a signal\n- __scalar__ - a single value that can be arbitrarily considered as a one-dimensional `vector` or one sample of a `signal`\n- __time__ - a timestamp associating each frame in a stream to a point in time regarding an arbitrary reference common to all modules in a graph\n- __metadata__ - additional description data associated to a frame by a module\n- __stream parameters__ - parameters defining the nature of a stream at the output of a module (attribute `streamParams`) that may depend on the stream parameters of the incoming stream\n  - `frameSize`: number of values in the frame data\n  - `frameRate`: number of frames per seconds for regularly sampled streams, `0` otherwise\n  - `frameType`: type of frame data (`vector`, `signal` or `scalar`)\n  - `sourceSampleRate`: number of frames per seconds output by the graph's `source`\n  - `sourceSampleCount`: number of consecutive discrete time values contained in the data frame output by the graph's `source` (e.g. the signal block size of an audio source or 1 for streams of sensor data vectors)\n  - `description`: an array of strings describing the output dimensions of `vector` or `scalar` frames (e.g. `['mean', 'stddev', 'min', 'max']`)\n\n## Available nodes and examples\n\n#### common\n\n_core:_\n\n* [BaseLfo](http://wavesjs.github.io/waves-lfo/module-common.core.BaseLfo.html)\n\n_operators:_\n\n* [Biquad](http://wavesjs.github.io/waves-lfo/module-common.operator.Biquad.html) -\n  [_example 1_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/operator-biquad-signal/index.html), [_example 2_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/operator-biquad-vector/index.html)\n* [Dct](http://wavesjs.github.io/waves-lfo/module-common.operator.Dct.html)\n* [Fft](http://wavesjs.github.io/waves-lfo/module-common.operator.Fft.html)\n* [Magnitude](http://wavesjs.github.io/waves-lfo/module-common.operator.Magnitude.html)\n* [MeanStddev](http://wavesjs.github.io/waves-lfo/module-common.operator.MeanStddev.html)\n* [Mel](http://wavesjs.github.io/waves-lfo/module-common.operator.Mel.html)\n* [Mfcc](http://wavesjs.github.io/waves-lfo/module-common.operator.Mfcc.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/mosaicking/index.html)\n* [MinMax](http://wavesjs.github.io/waves-lfo/module-common.operator.MinMax.html) -\n  [example](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-waveform-display/index.html)\n* [MovingAverage](http://wavesjs.github.io/waves-lfo/module-common.operator.MovingAverage.html) -\n  [_example (graphical)_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-bridge/index.html)\n* [MovingMedian](http://wavesjs.github.io/waves-lfo/module-common.operator.MovingMedian.html)\n* [OnOff](http://wavesjs.github.io/waves-lfo/module-common.operator.OnOff.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-vu-meter-display/index.html)\n* [Rms](http://wavesjs.github.io/waves-lfo/module-common.operator.Rms.html)\n* [Segmenter](http://wavesjs.github.io/waves-lfo/module-common.operator.Segmenter.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/operator-segmenter/index.html)\n* [Select](http://wavesjs.github.io/waves-lfo/module-common.operator.Select.html)\n* [Slicer](http://wavesjs.github.io/waves-lfo/module-common.operator.Slicer.html)\n* [Yin](http://wavesjs.github.io/waves-lfo/module-common.operator.Yin.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/operator-yin/index.html)\n\n_sources:_\n\n* [EventIn](http://wavesjs.github.io/waves-lfo/module-common.source.EventIn.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-bridge/index.html)\n\n_sinks:_\n\n* [Bridge](http://wavesjs.github.io/waves-lfo/module-common.sink.Bridge.html) -\n  [_example 1_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-bridge/index.html), [_example 2_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-marker-display/index.html)\n* [DataRecorder](http://wavesjs.github.io/waves-lfo/module-common.sink.DataRecorder.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/mosaicking/index.html)\n* [Logger](http://wavesjs.github.io/waves-lfo/module-common.sink.Logger.html)\n* [SignalRecorder](http://wavesjs.github.io/waves-lfo/module-common.sink.SignalRecorder.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-signal-recorder/index.html)\n\n\n#### client only\n\n_sources:_\n\n* [AudioInBuffer](http://wavesjs.github.io/waves-lfo/module-client.source.AudioInBuffer.html)\n* [AudioInNode](http://wavesjs.github.io/waves-lfo/module-client.source.AudioInNode.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/source-audio-in-node/index.html)\n\n_sinks:_\n\n* [BaseDisplay](http://wavesjs.github.io/waves-lfo/module-client.sink.BaseDisplay.html)\n* [BpfDisplay](http://wavesjs.github.io/waves-lfo/module-client.sink.BpfDisplay.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-bpf-display/index.html)\n* [MarkerDisplay](http://wavesjs.github.io/waves-lfo/module-client.sink.MarkerDisplay.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-marker-display/index.html)\n* [SignalDisplay](http://wavesjs.github.io/waves-lfo/module-client.sink.SignalDisplay.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-signal-display/index.html)\n* [SpectrumDisplay](http://wavesjs.github.io/waves-lfo/module-client.sink.SpectrumDisplay.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-spectrum-display/index.html)\n* [TraceDisplay](http://wavesjs.github.io/waves-lfo/module-client.sink.TraceDisplay.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-trace-display/index.html)\n* [VuMeterDisplay](http://wavesjs.github.io/waves-lfo/module-client.sink.VuMeterDisplay.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-vu-meter-display/index.html)\n* [WaveformDisplay](http://wavesjs.github.io/waves-lfo/module-client.sink.WaveformDisplay.html) -\n  [_example_](https://cdn.rawgit.com/wavesjs/waves-lfo/master/examples/sink-waveform-display/index.html)\n\n#### node only\n\n_sources:_\n\n* [AudioInFile](http://wavesjs.github.io/waves-lfo/module-node.source.AudioInFile.html)\n\n_sinks:_\n\n* [DataToFile](http://wavesjs.github.io/waves-lfo/module-node.sink.DataToFile.html)\n\n## Standalone usage\n\nMost of the operators can be used in a `standalone` mode which allow to consume the implemented algorithm without the burden of creating a whole graph.\n\n```js\nimport * as lfo from 'waves-lfo/common';\n\nconst rms = new lfo.operator.Rms();\nrms.initStream({ frameType: 'signal', frameSize: 1000 });\n\nconst results = rms.inputSignal([...values]);\n```\n\n<!--\n## `SegmentProducer` and `SegmentDescriptor`\n\n@todo\n-->\n\n## Implementation of an `lfo` operator\n\nTo create a new operator, the `BaseLfo` must be extended, the class is available in the `waves-lfo/core` entry point.\n\n```js\nimport { BaseLfo } from 'waves-lfo/core';\n// define class parameters\nconst parameters = {\n  factor: {\n    type: 'integer',\n    default: 1,\n  },\n};\n\nclass Multiplier extends lfo.core.BaseLfo {\n  constructor(options) {\n    // set the parameters and options of the node\n    super(parameters, options);\n  }\n\n  // implementing this method allow the node to handle incomming\n  // `vector` frames\n  processVector(frame) {\n    const frameSize = this.streamParams.frameSize;\n    const factor = this.params.get('factor');\n\n    // transfert data from `frame` (output of previous node)\n    // to the current node, data of the incomming frame should\n    // never be modifed\n    for (let i = 0; i < frameSize; i++)\n      this.frame.data[i] = frame.data[i] * factor;\n  }\n}\n\nconst multiplier = new Multiplier({ factor: 4 });\n```\n\n## `lfo` and `PiPo`\n\nThe `lfo` library is based on the same concepts and very similar formalisms as [PiPo](http://ismm.ircam.fr/pipo/).\nHowever, the APIs of `lfo` and `PiPo` defer in many details due to the very different constraints of the Javascript and C/C++ development and runtime environments.\n\n<hr />\n## Credits and License\n\nThe `lfo` library has been developed at [Ircam – Centre Pompidou](http://www.ircam.fr) and is released under the BSD-3-Clause license.\n\nThe formalisms and API of the library has been designed in the framework of the EU H2020 project Rapid-Mix by Norbert Schnell and Benjamin Matuszewski.\n\nThe library has been developed by Benjamin Matuszewski in the framework of the CoSiMa research project funded by the French National Research Agency (ANR).\n\nA first version of the library has been developed by Victor Saiz in the framework of the WAVE ANR research project coordinated by Samuel Goldszmidt.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wavesjs/waves-lfo.git"
  },
  "scripts": {
    "bundle": "node ./bin/runner --bundle",
    "doc": "jsdoc -c jsdoc.json",
    "prewatch": "npm run transpile",
    "test": "babel-tape-runner tests/**.test.js",
    "transpile": "node ./bin/runner --transpile",
    "watch": "node ./bin/runner --watch"
  },
  "standalone": "lfo",
  "version": "1.0.0"
}
